import os
import random
import string

from mongoengine import connect, Document, StringField, DateTimeField, IntField, ListField, DictField, \
    EmbeddedDocumentField, EmbeddedDocument
import datetime

# Connect to MongoDB
connect(db=os.environ['MONGO_DB'], host=os.environ['MONGO_HOST'], port=int(os.environ['MONGO_PORT']))


def generate_random_user_id():
    """Generate a random 5 character user id from Upper Case letters and numbers"""
    user_id = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(6))
    return user_id


# Message class that is embedded in the UserData class
class Message(EmbeddedDocument):
    """A message sent to or from the user"""
    role = StringField(required=True, choices=['User', 'Ajira_bot'])
    message = StringField(required=True)
    created_at = DateTimeField(default=datetime.datetime.utcnow)
    direction = StringField(required=True, choices=['inbound', 'outbound'])


class FollowupQuestionSet(EmbeddedDocument):
    """A set of followup questions generated by GPT-3 based on an incomplete response by the user"""
    bot_question = StringField(required=True)
    user_response = StringField(required=True)
    unasked_questions = ListField(StringField())
    asked_questions = ListField(StringField())


class UserData(Document):
    """A conversation between a user and the chatbot"""

    # Define the fields for the UserData class
    conversation_id = StringField(required=True)
    user_phone_number = StringField(required=True, unique=True, max_length=20, min_length=10, regex=r'^\+?1?\d{9,15}$',
                                    error_message='Phone number must be entered in the format: \'+999999999\'. Up to 15 digits allowed.')
    contact_method = StringField(required=True, error_message='Contact method must be either \'SMS\' or \'Whatsapp\'')
    user_id = StringField(default=generate_random_user_id)
    user_name = StringField()
    user_email = StringField()
    user_address = StringField()
    user_city = StringField()
    user_state = StringField()
    user_zip = StringField()
    user_country = StringField()
    user_work_experience = ListField(DictField())
    user_education = ListField(DictField())
    user_skills = ListField(DictField())
    user_generated_resumes = ListField(DictField())
    created_at = DateTimeField(default=datetime.datetime.utcnow)
    updated_at = DateTimeField(default=datetime.datetime.utcnow)
    messages = ListField(EmbeddedDocumentField(Message))
    followup_questions = ListField(EmbeddedDocumentField(FollowupQuestionSet))

    def save(self, *args, **kwargs):
        self.updated_at = datetime.datetime.utcnow()
        super(UserData, self).save(*args, **kwargs)


def create_user_data(self, conversation_id, phone_number, contact_method='SMS'):
    """Create a new user data object and save it to the database"""
    user_data = UserData(conversation_id=conversation_id, user_phone_number=phone_number,
                         contact_method=contact_method)

    user_data.save()


def save_message_to_database(conversation_id, message, sender, direction, created_at=datetime.datetime.utcnow()):
    """Save a message to the database"""
    # if no user data exists for this conversation, create a new user data object
    if not UserData.objects(conversation_id=conversation_id).first():
        create_user_data(conversation_id=conversation_id, phone_number=phone_number)

    # create a new message object using the Messages class schema
    new_message = Message(
        message=message,
        role=sender,
        direction=direction,
        created_at=created_at
    )
    # append the new message to the list of messages
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.messages.append(new_message)
    user_data.save()

    return


def save_name_to_database(conversation_id, name):
    """Save the user's name to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_name = name
    user_data.save()

    return


def save_email_to_database(conversation_id, email):
    """Save the user's email to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_email = email
    user_data.save()

    return


def save_address_to_database(conversation_id, address):
    """Save the user's address to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_address = address
    user_data.save()

    return


def save_city_to_database(conversation_id, city):
    """Save the user's city to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_city = city
    user_data.save()

    return


def save_state_to_database(conversation_id, state):
    """Save the user's state to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_state = state
    user_data.save()

    return


def save_zip_to_database(conversation_id, zip):
    """Save the user's zip to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_zip = zip
    user_data.save()

    return


def save_country_to_database(conversation_id, country):
    """Save the user's country to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_country = country
    user_data.save()

    return


def save_single_work_experience_to_database(conversation_id, work_experience):
    """Save a single work experience to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_work_experience.append(work_experience)
    user_data.save()

    return


def save_single_education_to_database(conversation_id, education):
    """Save a single education to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_education.append(education)
    user_data.save()

    return


def save_single_skill_to_database(conversation_id, skill):
    """Save a single skill to the database"""
    user_data = UserData.objects(conversation_id=conversation_id).first()
    user_data.user_skills.append(skill)
    user_data.save()

    return
